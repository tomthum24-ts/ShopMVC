<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mustache</name>
    </assembly>
    <members>
        <member name="T:Mustache.ArgumentCollection">
            <summary>
            Associates parameters to their argument values.
            </summary>
        </member>
        <member name="M:Mustache.ArgumentCollection.#ctor">
            <summary>
            Initializes a new instance of an ArgumentCollection.
            </summary>
        </member>
        <member name="M:Mustache.ArgumentCollection.AddArgument(Mustache.TagParameter,Mustache.IArgument)">
            <summary>
            Associates the given parameter to the key placeholder.
            </summary>
            <param name="parameter">The parameter to associate the key with.</param>
            <param name="argument">The argument.</param>
            <remarks>If the key is null, the default value of the parameter will be used.</remarks>
        </member>
        <member name="M:Mustache.ArgumentCollection.GetKey(Mustache.TagParameter)">
            <summary>
            Gets the key that will be used to find the substitute value.
            </summary>
            <param name="parameter">The name of the parameter.</param>
        </member>
        <member name="M:Mustache.ArgumentCollection.GetArguments(Mustache.Scope,Mustache.Scope)">
            <summary>
            Substitutes the key placeholders with their respective values.
            </summary>
            <param name="keyScope">The key/value pairs in the current lexical scope.</param>
            <param name="contextScope">The key/value pairs in current context.</param>
            <returns>A dictionary associating the parameter name to the associated value.</returns>
        </member>
        <member name="T:Mustache.CompoundGenerator">
            <summary>
            Builds text by combining the output of other generators.
            </summary>
        </member>
        <member name="M:Mustache.CompoundGenerator.#ctor(Mustache.TagDefinition,Mustache.ArgumentCollection)">
            <summary>
            Initializes a new instance of a CompoundGenerator.
            </summary>
            <param name="definition">The tag that the text is being generated for.</param>
            <param name="arguments">The arguments that were passed to the tag.</param>
        </member>
        <member name="M:Mustache.CompoundGenerator.AddGenerator(Mustache.IGenerator)">
            <summary>
            Adds the given generator. 
            </summary>
            <param name="generator">The generator to add.</param>
        </member>
        <member name="M:Mustache.CompoundGenerator.AddGenerator(Mustache.TagDefinition,Mustache.IGenerator)">
            <summary>
            Adds the given generator, determining whether the generator should
            be part of the primary generators or added as an secondary generator.
            </summary>
            <param name="definition">The tag that the generator is generating text for.</param>
            <param name="generator">The generator to add.</param>
        </member>
        <member name="T:Mustache.ConditionTagDefinition">
            <summary>
            Defines a tag that conditionally prints its content.
            </summary>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ConditionTagDefinition.
            </summary>
            <param name="tagName">The name of the tag.</param>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.GetParameters">
            <summary>
            Gets the parameters that can be passed to the tag.
            </summary>
            <returns>The parameters.</returns>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.GetChildTags">
            <summary>
            Gets the tags that come into scope within the context of the current tag.
            </summary>
            <returns>The child tag definitions.</returns>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.ShouldCreateSecondaryGroup(Mustache.TagDefinition)">
            <summary>
            Gets whether the given tag's generator should be used for a secondary (or substitute) text block.
            </summary>
            <param name="definition">The tag to inspect.</param>
            <returns>True if the tag's generator should be used as a secondary generator.</returns>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.ShouldGeneratePrimaryGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets whether the primary generator group should be used to render the tag.
            </summary>
            <param name="arguments">The arguments passed to the tag.</param>
            <returns>
            True if the primary generator group should be used to render the tag;
            otherwise, false to use the secondary group.
            </returns>
        </member>
        <member name="M:Mustache.ConditionTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="T:Mustache.ContentTagDefinition">
            <summary>
            Defines a tag that can contain inner text.
            </summary>
        </member>
        <member name="M:Mustache.ContentTagDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ContentTagDefinition.
            </summary>
            <param name="tagName">The name of the tag being defined.</param>
        </member>
        <member name="M:Mustache.ContentTagDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a ContentTagDefinition.
            </summary>
            <param name="tagName">The name of the tag being defined.</param>
            <param name="isBuiltin">Specifies whether the tag is a built-in tag.</param>
        </member>
        <member name="M:Mustache.ContentTagDefinition.GetHasContent">
            <summary>
            Gets or sets whether the tag can have content.
            </summary>
            <returns>True if the tag can have a body; otherwise, false.</returns>
        </member>
        <member name="T:Mustache.Context">
            <summary>
            Represents a context within a template.
            </summary>
        </member>
        <member name="M:Mustache.Context.#ctor(System.String,Mustache.ContextParameter[])">
            <summary>
            Initializes a new instance of a Context.
            </summary>
            <param name="tagName">The name of the tag that created the context.</param>
            <param name="parameters">The context parameters.</param>
        </member>
        <member name="P:Mustache.Context.TagName">
            <summary>
            Gets the tag that created the context.
            </summary>
        </member>
        <member name="P:Mustache.Context.Parameters">
            <summary>
            Gets the argument used to create the context.
            </summary>
        </member>
        <member name="T:Mustache.ContextParameter">
            <summary>
            Holds information describing a parameter that creates a new context.
            </summary>
        </member>
        <member name="M:Mustache.ContextParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a ContextParameter.
            </summary>
            <param name="parameter">The parameter that is used to create a new context.</param>
            <param name="argument">The key whose corresponding value will be used to create the context.</param>
        </member>
        <member name="P:Mustache.ContextParameter.Parameter">
            <summary>
            Gets the parameter that is used to create a new context.
            </summary>
        </member>
        <member name="P:Mustache.ContextParameter.Argument">
            <summary>
            Gets the key whose corresponding value will be used to create the context.
            </summary>
        </member>
        <member name="T:Mustache.EachTagDefinition">
            <summary>
            Defines a tag that can iterate over a collection of items and render
            the content using each item as the context.
            </summary>
        </member>
        <member name="M:Mustache.EachTagDefinition.#ctor">
            <summary>
            Initializes a new instance of an EachTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.EachTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Mustache.EachTagDefinition.GetParameters">
            <summary>
            Gets the parameters that can be passed to the tag.
            </summary>
            <returns>The parameters.</returns>
        </member>
        <member name="M:Mustache.EachTagDefinition.GetChildContext(System.IO.TextWriter,Mustache.Scope,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the context to use when building the inner text of the tag.
            </summary>
            <param name="writer">The text writer passed</param>
            <param name="keyScope">The current scope.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="contextScope">The scope context.</param>
            <returns>The scope to use when building the inner text of the tag.</returns>
        </member>
        <member name="M:Mustache.EachTagDefinition.GetChildTags">
            <summary>
            Gets the tags that are in scope under this tag.
            </summary>
            <returns>The name of the tags that are in scope.</returns>
        </member>
        <member name="M:Mustache.EachTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="T:Mustache.ElifTagDefinition">
            <summary>
            Defines a tag that conditionally renders its content if preceding if and elif tags fail.
            </summary>
        </member>
        <member name="M:Mustache.ElifTagDefinition.#ctor">
            <summary>
            Initializes a new instance of an ElifTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.ElifTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Mustache.ElifTagDefinition.GetClosingTags">
            <summary>
            Gets the tags that indicate the end of the current tags context.
            </summary>
        </member>
        <member name="T:Mustache.ElseTagDefinition">
            <summary>
            Defines a tag that renders its content if all preceding if and elif tags.
            </summary>
        </member>
        <member name="M:Mustache.ElseTagDefinition.#ctor">
            <summary>
            Initializes a new instance of a ElseTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.ElseTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Mustache.ElseTagDefinition.GetClosingTags">
            <summary>
            Gets the tags that indicate the end of the current tag's content.
            </summary>
        </member>
        <member name="M:Mustache.ElseTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="T:Mustache.FormatCompiler">
            <summary>
            Parses a format string and returns a text generator.
            </summary>
        </member>
        <member name="M:Mustache.FormatCompiler.#ctor">
            <summary>
            Initializes a new instance of a FormatCompiler.
            </summary>
        </member>
        <member name="E:Mustache.FormatCompiler.PlaceholderFound">
            <summary>
            Occurs when a placeholder is found in the template.
            </summary>
        </member>
        <member name="E:Mustache.FormatCompiler.VariableFound">
            <summary>
            Occurs when a variable is found in the template.
            </summary>
        </member>
        <member name="P:Mustache.FormatCompiler.RemoveNewLines">
            <summary>
            Gets or sets whether newlines are removed from the template (default: true).
            </summary>
        </member>
        <member name="P:Mustache.FormatCompiler.AreExtensionTagsAllowed">
            <summary>
            Gets or sets whether the compiler searches for tags using triple curly braces.
            </summary>
        </member>
        <member name="M:Mustache.FormatCompiler.RegisterTag(Mustache.TagDefinition,System.Boolean)">
            <summary>
            Registers the given tag definition with the parser.
            </summary>
            <param name="definition">The tag definition to register.</param>
            <param name="isTopLevel">Specifies whether the tag is immediately in scope.</param>
        </member>
        <member name="M:Mustache.FormatCompiler.Compile(System.String)">
            <summary>
            Builds a text generator based on the given format.
            </summary>
            <param name="format">The format to parse.</param>
            <returns>The text generator.</returns>
        </member>
        <member name="T:Mustache.Generator">
            <summary>
            Generates text by substituting an object's values for placeholders.
            </summary>
        </member>
        <member name="M:Mustache.Generator.#ctor(Mustache.IGenerator)">
            <summary>
            Initializes a new instance of a Generator.
            </summary>
            <param name="generator">The text generator to wrap.</param>
        </member>
        <member name="E:Mustache.Generator.KeyFound">
            <summary>
            Occurs when a key/property is found.
            </summary>
        </member>
        <member name="E:Mustache.Generator.KeyNotFound">
            <summary>
            Occurs when a key/property is not found in the object graph.
            </summary>
        </member>
        <member name="E:Mustache.Generator.ValueRequested">
            <summary>
            Occurs when a setter is encountered and requires a value to be provided.
            </summary>
        </member>
        <member name="E:Mustache.Generator.TagFormatted">
            <summary>
            Occurs when a tag is replaced by its text.
            </summary>
        </member>
        <member name="M:Mustache.Generator.Render(System.Object)">
            <summary>
            Gets the text that is generated for the given object.
            </summary>
            <param name="source">The object to generate the text with.</param>
            <returns>The text generated for the given object.</returns>
        </member>
        <member name="M:Mustache.Generator.Render(System.IFormatProvider,System.Object)">
            <summary>
            Gets the text that is generated for the given object.
            </summary>
            <param name="provider">The format provider to use.</param>
            <param name="source">The object to generate the text with.</param>
            <returns>The text generated for the given object.</returns>
        </member>
        <member name="E:Mustache.HtmlFormatCompiler.PlaceholderFound">
            <summary>
            Occurs when a placeholder is found in the template.
            </summary>
        </member>
        <member name="E:Mustache.HtmlFormatCompiler.VariableFound">
            <summary>
            Occurs when a variable is found in the template.
            </summary>
        </member>
        <member name="M:Mustache.HtmlFormatCompiler.RegisterTag(Mustache.TagDefinition,System.Boolean)">
            <summary>
            Registers the given tag definition with the parser.
            </summary>
            <param name="definition">The tag definition to register.</param>
            <param name="isTopLevel">Specifies whether the tag is immediately in scope.</param>
        </member>
        <member name="M:Mustache.HtmlFormatCompiler.Compile(System.String)">
            <summary>
            Builds a text generator based on the given format.
            </summary>
            <param name="format">The format to parse.</param>
            <returns>The text generator.</returns>
        </member>
        <member name="T:Mustache.IfTagDefinition">
            <summary>
            Defines a tag that renders its content depending on the truthyness
            of its argument, with optional elif and else nested tags.
            </summary>
        </member>
        <member name="M:Mustache.IfTagDefinition.#ctor">
            <summary>
            Initializes a new instance of a IfTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.IfTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="T:Mustache.IGenerator">
            <summary>
            Applies the values of an object to the format plan, generating a string.
            </summary>
        </member>
        <member name="M:Mustache.IGenerator.GetText(System.IO.TextWriter,Mustache.Scope,Mustache.Scope,System.Action{Mustache.Substitution})">
            <summary>
            Generates the text when applying the format plan.
            </summary>
            <param name="writer">The text writer to send all text to.</param>
            <param name="keyScope">The current lexical scope of the keys.</param>
            <param name="contextScope">The data associated to the context.</param>
            <param name="postProcessor">A function to apply after a substitution is made.</param>
            <returns>The generated text.</returns>
        </member>
        <member name="T:Mustache.IndexTagDefinition">
            <summary>
            Defines a tag that outputs the current index within an each loop.
            </summary>
        </member>
        <member name="M:Mustache.IndexTagDefinition.#ctor">
            <summary>
            Initializes a new instance of an IndexTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.IndexTagDefinition.GetText(System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the text to output.
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="contextScope">Extra data passed along with the context.</param>
        </member>
        <member name="T:Mustache.InlineGenerator">
            <summary>
            Generates the text for a tag that is replaced with its generated text.
            </summary>
        </member>
        <member name="M:Mustache.InlineGenerator.#ctor(Mustache.TagDefinition,Mustache.ArgumentCollection)">
            <summary>
            Initializes a new instance of an InlineGenerator.
            </summary>
            <param name="definition">The tag to render the text for.</param>
            <param name="arguments">The arguments passed to the tag.</param>
        </member>
        <member name="T:Mustache.InlineTagDefinition">
            <summary>
            Defines a tag that cannot contain inner text.
            </summary>
        </member>
        <member name="M:Mustache.InlineTagDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of an InlineTagDefinition.
            </summary>
            <param name="tagName">The name of the tag being defined.</param>
        </member>
        <member name="M:Mustache.InlineTagDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of an InlineTagDefinition.
            </summary>
            <param name="tagName">The name of the tag being defined.</param>
            <param name="isBuiltin">Specifies whether the tag is a built-in tag.</param>
        </member>
        <member name="M:Mustache.InlineTagDefinition.GetHasContent">
            <summary>
            Gets or sets whether the tag can have content.
            </summary>
            <returns>True if the tag can have a body; otherwise, false.</returns>
        </member>
        <member name="M:Mustache.InlineTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a child context.
            </summary>
            <returns>The parameters that are used to create a child context.</returns>
        </member>
        <member name="T:Mustache.KeyFoundEventArgs">
            <summary>
            Holds the information about a key that was found.
            </summary>
        </member>
        <member name="M:Mustache.KeyFoundEventArgs.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of a KeyFoundEventArgs.
            </summary>
            <param name="key">The fully-qualified key.</param>
            <param name="value">The object to use as the substitute.</param>
            <param name="isExtension">Specifies whether the key was found within triple curly braces.</param>
        </member>
        <member name="P:Mustache.KeyFoundEventArgs.Key">
            <summary>
            Gets the fully-qualified key.
            </summary>
        </member>
        <member name="P:Mustache.KeyFoundEventArgs.IsExtension">
            <summary>
            Gets or sets whether the key appeared within triple curly braces.
            </summary>
        </member>
        <member name="P:Mustache.KeyFoundEventArgs.Substitute">
            <summary>
            Gets or sets the object to use as the substitute.
            </summary>
        </member>
        <member name="T:Mustache.KeyGenerator">
            <summary>
            Substitutes a key placeholder with the textual representation of the associated object.
            </summary>
        </member>
        <member name="M:Mustache.KeyGenerator.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a KeyGenerator.
            </summary>
            <param name="key">The key to substitute with its value.</param>
            <param name="alignment">The alignment specifier.</param>
            <param name="formatting">The format specifier.</param>
            <param name="isExtension">Specifies whether the key was found within triple curly braces.</param>
        </member>
        <member name="T:Mustache.KeyNotFoundEventArgs">
            <summary>
            Holds the information needed to handle a missing key.
            </summary>
        </member>
        <member name="M:Mustache.KeyNotFoundEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a KeyNotFoundEventArgs.
            </summary>
            <param name="key">The fully-qualified key.</param>
            <param name="missingMember">The part of the key that could not be found.</param>
            <param name="isExtension">Specifies whether the key appears within triple curly braces.</param>
        </member>
        <member name="P:Mustache.KeyNotFoundEventArgs.Key">
            <summary>
            Gets the fully-qualified key.
            </summary>
        </member>
        <member name="P:Mustache.KeyNotFoundEventArgs.MissingMember">
            <summary>
            Gets the part of the key that could not be found.
            </summary>
        </member>
        <member name="P:Mustache.KeyNotFoundEventArgs.IsExtension">
            <summary>
            Gets whether the key appeared within triple curly braces.
            </summary>
        </member>
        <member name="P:Mustache.KeyNotFoundEventArgs.Handled">
            <summary>
            Gets or sets whether to use the substitute.
            </summary>
        </member>
        <member name="P:Mustache.KeyNotFoundEventArgs.Substitute">
            <summary>
            Gets or sets the object to use as the substitute.
            </summary>
        </member>
        <member name="T:Mustache.MasterTagDefinition">
            <summary>
            Defines a pseudo tag that wraps the entire content of a format string.
            </summary>
        </member>
        <member name="M:Mustache.MasterTagDefinition.#ctor">
            <summary>
            Initializes a new instance of a MasterTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.MasterTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Mustache.MasterTagDefinition.GetClosingTags">
            <summary>
            Gets the name of the tags that indicate that the tag's context is closed.
            </summary>
            <returns>The tag names.</returns>
        </member>
        <member name="M:Mustache.MasterTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="T:Mustache.NestedContext">
            <summary>
            Holds the objects to use when processing a child context of another tag.
            </summary>
        </member>
        <member name="M:Mustache.NestedContext.#ctor">
            <summary>
            Initializes a new instance of a NestedContext.
            </summary>
        </member>
        <member name="P:Mustache.NestedContext.Writer">
            <summary>
            Gets or sets the writer to use when generating the child context.
            </summary>
            <remarks>Setting the writer to null will indicate that the tag's writer should be used.</remarks>
        </member>
        <member name="P:Mustache.NestedContext.WriterNeedsConsidated">
            <summary>
            Gets or sets whether the text sent to the returned writer needs to be added
            to the parent tag's writer. This should be false if the parent writer is
            being returned or is being wrapped.
            </summary>
        </member>
        <member name="P:Mustache.NestedContext.KeyScope">
            <summary>
            Gets or sets the key scope to use when generating the child context.
            </summary>
            <remarks>Setting the scope to null will indicate that the current scope should be used.</remarks>
        </member>
        <member name="P:Mustache.NestedContext.ContextScope">
            <summary>
            Gets or sets data associated with the context.
            </summary>
        </member>
        <member name="T:Mustache.NewlineTagDefinition">
            <summary>
            Defines a tag that outputs a newline.
            </summary>
        </member>
        <member name="M:Mustache.NewlineTagDefinition.#ctor">
            <summary>
            Initializes a new instance of an NewlineTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.NewlineTagDefinition.GetText(System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the text to output.
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="context">Extra data passed along with the context.</param>
        </member>
        <member name="T:Mustache.PlaceholderFoundEventArgs">
            <summary>
            Holds the information descibing a key that is found in a template.
            </summary>
        </member>
        <member name="M:Mustache.PlaceholderFoundEventArgs.#ctor(System.String,System.String,System.String,System.Boolean,Mustache.Context[])">
            <summary>
            Initializes a new instance of a PlaceholderFoundEventArgs.
            </summary>
            <param name="key">The key that was found.</param>
            <param name="alignment">The alignment that will be applied to the substitute value.</param>
            <param name="formatting">The formatting that will be applied to the substitute value.</param>
            <param name="isExtension">Indicates whether the placeholder was found within triple curly braces.</param>
            <param name="context">The context where the placeholder was found.</param>
        </member>
        <member name="P:Mustache.PlaceholderFoundEventArgs.Key">
            <summary>
            Gets or sets the key that was found.
            </summary>
        </member>
        <member name="P:Mustache.PlaceholderFoundEventArgs.Alignment">
            <summary>
            Gets or sets the alignment that will be applied to the substitute value.
            </summary>
        </member>
        <member name="P:Mustache.PlaceholderFoundEventArgs.Formatting">
            <summary>
            Gets or sets the formatting that will be applied to the substitute value.
            </summary>
        </member>
        <member name="P:Mustache.PlaceholderFoundEventArgs.IsExtension">
            <summary>
            Gets or sets whether the placeholder was found within triple curly braces.
            </summary>
        </member>
        <member name="P:Mustache.PlaceholderFoundEventArgs.Context">
            <summary>
            Gets the context where the placeholder was found.
            </summary>
        </member>
        <member name="T:Mustache.PropertyDictionary">
            <summary>
            Provides methods for creating instances of PropertyDictionary.
            </summary>
        </member>
        <member name="M:Mustache.PropertyDictionary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of a PropertyDictionary.
            </summary>
            <param name="instance">The instance to wrap in the PropertyDictionary.</param>
        </member>
        <member name="P:Mustache.PropertyDictionary.Instance">
            <summary>
            Gets the underlying instance.
            </summary>
        </member>
        <member name="M:Mustache.PropertyDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether a property with the given name exists.
            </summary>
            <param name="key">The name of the property.</param>
            <returns>True if the property exists; otherwise, false.</returns>
        </member>
        <member name="P:Mustache.PropertyDictionary.Keys">
            <summary>
            Gets the name of the properties in the type.
            </summary>
        </member>
        <member name="M:Mustache.PropertyDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value for the given property name.
            </summary>
            <param name="key">The name of the property to get the value for.</param>
            <param name="value">The variable to store the value of the property or the default value if the property is not found.</param>
            <returns>True if a property with the given name is found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The name of the property was null.</exception>
        </member>
        <member name="P:Mustache.PropertyDictionary.Values">
            <summary>
            Gets the values of all of the properties in the object.
            </summary>
        </member>
        <member name="P:Mustache.PropertyDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the given name.
            </summary>
            <param name="key">The name of the property to get or set.</param>
            <returns>The value of the property with the given name.</returns>
            <exception cref="T:System.ArgumentNullException">The property name was null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The type does not have a property with the given name.</exception>
            <exception cref="T:System.ArgumentException">The property did not support getting or setting.</exception>
            <exception cref="T:System.ArgumentException">
            The object does not match the target type, or a property is a value type but the value is null.
            </exception>
        </member>
        <member name="P:Mustache.PropertyDictionary.Count">
            <summary>
            Gets the number of properties in the type.
            </summary>
        </member>
        <member name="P:Mustache.PropertyDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <summary>
            Gets or sets whether updates will be ignored.
            </summary>
        </member>
        <member name="M:Mustache.PropertyDictionary.GetEnumerator">
            <summary>
            Gets the propety name/value pairs in the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mustache.RegexHelper">
            <summary>
            Provides utility methods that require regular expressions.
            </summary>
        </member>
        <member name="M:Mustache.RegexHelper.IsValidIdentifier(System.String)">
            <summary>
            Determines whether the given name is a legal identifier.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if the name is a legal identifier; otherwise, false.</returns>
        </member>
        <member name="T:Mustache.Scope">
            <summary>
            Represents a scope of keys.
            </summary>
        </member>
        <member name="M:Mustache.Scope.#ctor(System.Object)">
            <summary>
            Initializes a new instance of a KeyScope.
            </summary>
            <param name="source">The object to search for keys in.</param>
        </member>
        <member name="M:Mustache.Scope.#ctor(System.Object,Mustache.Scope)">
            <summary>
            Initializes a new instance of a KeyScope.
            </summary>
            <param name="source">The object to search for keys in.</param>
            <param name="parent">The parent scope to search in if the value is not found.</param>
        </member>
        <member name="E:Mustache.Scope.KeyFound">
            <summary>
            Occurs when a key/property is found in the object graph.
            </summary>
        </member>
        <member name="E:Mustache.Scope.KeyNotFound">
            <summary>
            Occurs when a key/property is not found in the object graph.
            </summary>
        </member>
        <member name="E:Mustache.Scope.ValueRequested">
            <summary>
            Occurs when a setter is encountered and requires a value to be provided.
            </summary>
        </member>
        <member name="M:Mustache.Scope.CreateChildScope">
            <summary>
            Creates a child scope that searches for keys in a default dictionary of key/value pairs.
            </summary>
            <returns>The new child scope.</returns>
        </member>
        <member name="M:Mustache.Scope.CreateChildScope(System.Object)">
            <summary>
            Creates a child scope that searches for keys in the given object.
            </summary>
            <param name="source">The object to search for keys in.</param>
            <returns>The new child scope.</returns>
        </member>
        <member name="M:Mustache.Scope.Find(System.String,System.Boolean)">
            <summary>
            Attempts to find the value associated with the key with given name.
            </summary>
            <param name="name">The name of the key.</param>
            <param name="isExtension">Specifies whether the key appeared within triple curly braces.</param>
            <returns>The value associated with the key with the given name.</returns>
        </member>
        <member name="T:Mustache.SetTagDefinition">
            <summary>
            Defines a tag that declares a named value in the current context.
            </summary>
        </member>
        <member name="M:Mustache.SetTagDefinition.#ctor">
            <summary>
            Initializes a new instance of an SetTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.SetTagDefinition.GetText(System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the text to output.
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="contextScope">Extra data passed along with the context.</param>
        </member>
        <member name="T:Mustache.StaticGenerator">
            <summary>
            Generates a static block of text.
            </summary>
        </member>
        <member name="M:Mustache.StaticGenerator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a StaticGenerator.
            </summary>
        </member>
        <member name="P:Mustache.StaticGenerator.Value">
            <summary>
            Gets or sets the static text.
            </summary>
        </member>
        <member name="T:Mustache.TagDefinition">
            <summary>
            Defines the attributes of a custom tag.
            </summary>
        </member>
        <member name="M:Mustache.TagDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of a TagDefinition.
            </summary>
            <param name="tagName">The name of the tag.</param>
            <exception cref="T:System.ArgumentException">The name of the tag is null or blank.</exception>
        </member>
        <member name="M:Mustache.TagDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a TagDefinition.
            </summary>
            <param name="tagName">The name of the tag.</param>
            <param name="isBuiltIn">Specifies whether the tag is built-in or not. Checks are not performed on the names of built-in tags.</param>
        </member>
        <member name="P:Mustache.TagDefinition.Name">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:Mustache.TagDefinition.IsContextSensitive">
            <summary>
            Gets whether the tag is limited to the parent tag's context.
            </summary>
        </member>
        <member name="M:Mustache.TagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether a tag is limited to the parent tag's context.
            </summary>
        </member>
        <member name="P:Mustache.TagDefinition.Parameters">
            <summary>
            Gets the parameters that are defined for the tag.
            </summary>
        </member>
        <member name="M:Mustache.TagDefinition.GetParameters">
            <summary>
            Specifies which parameters are passed to the tag.
            </summary>
            <returns>The tag parameters.</returns>
        </member>
        <member name="P:Mustache.TagDefinition.HasContent">
            <summary>
            Gets whether the tag contains content.
            </summary>
        </member>
        <member name="M:Mustache.TagDefinition.GetHasContent">
            <summary>
            Gets whether tag has content.
            </summary>
            <returns>True if the tag has content; otherwise, false.</returns>
        </member>
        <member name="P:Mustache.TagDefinition.ClosingTags">
            <summary>
            Gets the tags that can indicate that the tag has closed.
            This field is only used if no closing tag is expected.
            </summary>
        </member>
        <member name="P:Mustache.TagDefinition.ChildTags">
            <summary>
            Gets the tags that are in scope within the current tag.
            </summary>
        </member>
        <member name="M:Mustache.TagDefinition.GetChildTags">
            <summary>
            Specifies which tags are scoped under the current tag.
            </summary>
            <returns>The child tag definitions.</returns>
        </member>
        <member name="M:Mustache.TagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameter that will be used to create a new child scope.
            </summary>
            <returns>The parameter that will be used to create a new child scope -or- null if no new scope is created.</returns>
        </member>
        <member name="M:Mustache.TagDefinition.GetChildContext(System.IO.TextWriter,Mustache.Scope,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the context to use when building the inner text of the tag.
            </summary>
            <param name="writer">The text writer passed</param>
            <param name="keyScope">The current key scope.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="contextScope">The scope context.</param>
            <returns>The scope to use when building the inner text of the tag.</returns>
        </member>
        <member name="M:Mustache.TagDefinition.GetText(System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Applies additional formatting to the inner text of the tag.
            </summary>
            <param name="writer">The text writer to write to.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="context">The data associated to the context.</param>
        </member>
        <member name="M:Mustache.TagDefinition.ConsolidateWriter(System.IO.TextWriter,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Consolidates the text in the given writer to a string, using the given arguments as necessary.
            </summary>
            <param name="writer">The writer containing the text to consolidate.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <returns>The consolidated string.</returns>
        </member>
        <member name="M:Mustache.TagDefinition.ShouldCreateSecondaryGroup(Mustache.TagDefinition)">
            <summary>
            Requests which generator group to associate the given tag type.
            </summary>
            <param name="definition">The child tag definition being grouped.</param>
            <returns>The name of the group to associate the given tag with.</returns>
        </member>
        <member name="M:Mustache.TagDefinition.ShouldGeneratePrimaryGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets whether the group with the given name should have text generated for them.
            </summary>
            <param name="arguments">The arguments passed to the tag.</param>
            <returns>True if text should be generated for the group; otherwise, false.</returns>
        </member>
        <member name="T:Mustache.TagFormattedEventArgs">
            <summary>
            Holds the information about a tag that's been converted to text.
            </summary>
        </member>
        <member name="M:Mustache.TagFormattedEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of a TagFormattedEventArgs.
            </summary>
            <param name="key">The fully-qualified key.</param>
            <param name="value">The formatted value being extended.</param>
            <param name="isExtension">Specifies whether the key was found within triple curly braces.</param>
        </member>
        <member name="P:Mustache.TagFormattedEventArgs.Key">
            <summary>
            Gets the fully-qualified key.
            </summary>
        </member>
        <member name="P:Mustache.TagFormattedEventArgs.IsExtension">
            <summary>
            Gets or sets whether the key appeared within triple curly braces.
            </summary>
        </member>
        <member name="P:Mustache.TagFormattedEventArgs.Substitute">
            <summary>
            Gets or sets the object to use as the substitute.
            </summary>
        </member>
        <member name="T:Mustache.TagParameter">
            <summary>
            Defines a parameter belonging to a custom tag.
            </summary>
        </member>
        <member name="M:Mustache.TagParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of a TagParameter.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException">The parameter name is null or an invalid identifier.</exception>
        </member>
        <member name="P:Mustache.TagParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Mustache.TagParameter.IsRequired">
            <summary>
            Gets or sets whether the field is required.
            </summary>
        </member>
        <member name="P:Mustache.TagParameter.DefaultValue">
            <summary>
            Gets or sets the default value to use when an argument is not provided
            for the parameter.
            </summary>
        </member>
        <member name="T:Mustache.ValueRequestEventArgs">
            <summary>
            Holds the value that a context variable is set to.
            </summary>
        </member>
        <member name="P:Mustache.ValueRequestEventArgs.Value">
            <summary>
            Gets or sets the value being set.
            </summary>
        </member>
        <member name="T:Mustache.VariableFoundEventArgs">
            <summary>
            Holds the information descibing a variable that is found in a template.
            </summary>
        </member>
        <member name="M:Mustache.VariableFoundEventArgs.#ctor(System.String,System.String,System.String,System.Boolean,Mustache.Context[])">
            <summary>
            Initializes a new instance of a VariableFoundEventArgs.
            </summary>
            <param name="name">The key that was found.</param>
            <param name="alignment">The alignment that will be applied to the substitute value.</param>
            <param name="formatting">The formatting that will be applied to the substitute value.</param>
            <param name="isExtension">Specifies whether the variable was found within triple curly braces.</param>
            <param name="context">The context where the placeholder was found.</param>
        </member>
        <member name="P:Mustache.VariableFoundEventArgs.Name">
            <summary>
            Gets or sets the key that was found.
            </summary>
        </member>
        <member name="P:Mustache.VariableFoundEventArgs.Alignment">
            <summary>
            Gets or sets the alignment that will be applied to the substitute value.
            </summary>
        </member>
        <member name="P:Mustache.VariableFoundEventArgs.Formatting">
            <summary>
            Gets or sets the formatting that will be applied to the substitute value.
            </summary>
        </member>
        <member name="P:Mustache.VariableFoundEventArgs.IsExtension">
            <summary>
            Gets or sets whether variable was found within triple curly braces.
            </summary>
        </member>
        <member name="P:Mustache.VariableFoundEventArgs.Context">
            <summary>
            Gets the context where the placeholder was found.
            </summary>
        </member>
        <member name="T:Mustache.WithTagDefinition">
            <summary>
            Defines a tag that changes the scope to the object passed as an argument.
            </summary>
        </member>
        <member name="M:Mustache.WithTagDefinition.#ctor">
            <summary>
            Initializes a new instance of a WithTagDefinition.
            </summary>
        </member>
        <member name="M:Mustache.WithTagDefinition.GetIsContextSensitive">
            <summary>
            Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Mustache.WithTagDefinition.GetParameters">
            <summary>
            Gets the parameters that can be passed to the tag.
            </summary>
            <returns>The parameters.</returns>
        </member>
        <member name="M:Mustache.WithTagDefinition.GetChildContextParameters">
            <summary>
            Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="M:Mustache.WithTagDefinition.GetChildContext(System.IO.TextWriter,Mustache.Scope,System.Collections.Generic.Dictionary{System.String,System.Object},Mustache.Scope)">
            <summary>
            Gets the context to use when building the inner text of the tag.
            </summary>
            <param name="writer">The text writer passed</param>
            <param name="keyScope">The current key scope.</param>
            <param name="arguments">The arguments passed to the tag.</param>
            <param name="contextScope">The context scope.</param>
            <returns>The scope to use when building the inner text of the tag.</returns>
        </member>
        <member name="T:Mustache.Properties.Resources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.BlankParameterName">
            <summary>
               Looks up a localized string similar to An attempt was made to define a parameter with a null or an invalid identifier..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.BlankTagName">
            <summary>
               Looks up a localized string similar to An attempt was made to define a tag with a null or an invalid identifier..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.DuplicateParameter">
            <summary>
               Looks up a localized string similar to A parameter with the same name already exists within the tag..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.DuplicateTagDefinition">
            <summary>
               Looks up a localized string similar to The {0} tag has already been registered..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.MissingClosingTag">
            <summary>
               Looks up a localized string similar to Expected a matching {0} tag but none was found..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.UnknownTag">
            <summary>
               Looks up a localized string similar to Encountered an unknown tag: {0}. It was either not registered or exists in a different context..
            </summary>
        </member>
        <member name="P:Mustache.Properties.Resources.WrongNumberOfArguments">
            <summary>
               Looks up a localized string similar to The wrong number of arguments were passed to an {0} tag..
            </summary>
        </member>
    </members>
</doc>
